@page "/editor"
@rendermode @(new InteractiveServerRenderMode(false))
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using Wisehat.Domain.Commands.WebProjects
@using Wisehat.Domain.Entities
@using Wisehat.Domain.Queries.WebProjects
@using MediatR
@using Wisehat.Web.Components.Layout
@using Wisehat.Web.Hubs
@using Wisehat.Web.Services
@inject ISender Sender
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject WidgetBucketService WBS
@layout EditorLayout
@implements IAsyncDisposable

<PageTitle>Page Editor</PageTitle>

<SectionContent SectionName="project-title">
  <input type="text" placeholder="@PreviousTitle" id="title" @bind-value="@NewTitle" @onfocusout="HandleTitleChange" />
</SectionContent>

<div id="page-container">
  <div id="widget-options-menu">
    <div id="save-btn" @onclick="HandleSave">
      <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24">
        <path d="M840-680v480q0 33-23.5 56.5T760-120H200q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h480l160 160Zm-80 34L646-760H200v560h560v-446ZM480-240q50 0 85-35t35-85q0-50-35-85t-85-35q-50 0-85 35t-35 85q0 50 35 85t85 35ZM240-560h360v-160H240v160Zm-40-86v446-560 114Z" />
      </svg>
    </div>
    <div id="clear-canvas-btn">
      Clear Canvas
    </div>
  </div>
  <div id="widget-sidebar">
    <div id="sidebar-title">Widgets</div>
    <div id="widgets">
      <div class="widget-preview-container">
        <h2>Fill box</h2>
        <div id="fillbox-widget" class="widget-preview" draggable="true" data-widget-type="fillbox">
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Text box</h2>
        <div id="textbox-widget" class="widget-preview" draggable="true" data-widget-type="textbox">
          <div>Sample Text</div>
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Image box</h2>
        <div id="imagebox-widget" class="widget-preview" draggable="true" data-widget-type="imagebox">
          <img src="sample-image.jpg"/>
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Video box</h2>
        <div id="videobox-widget" class="widget-preview" draggable="true" data-widget-type="videobox">
          <iframe width="150" height="80" src="https://youtu.be/dQw4w9WgXcQ?si=yU6qF0_BJpAY01d9" longdesc="Youtube Video">
          </iframe>
        </div>
      </div>      
    </div>
  </div>
  <div id="canvas">
    @if (WebProject is not null && WebProject.Widgets.Count > 0)
    {
      @foreach (var widget in WBS.GetWidgetsByProject(ProjectId))
      {
        <div id="@($"{widget.Type.ToString().ToLower()}_{widget.Id}")" 
             style="position: absolute; 
                    top: @(widget.Position.Y)px;
                    left: @(widget.Position.X)px;
                    width: @(widget.Size.X)px;
                    height: @(widget.Size.Y)px;
                    border-radius: 4px;
                    border-color: @widget.BorderColor;
                    background-color: @widget.BackgroundColor;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    cursor: grab;
                    resize: both;
                    overflow: auto;"
             draggable="true" 
             class="dropped-widget">
          @widget.Content
        </div>
      }
    }
  </div>
</div>

<script src="/js/signalr/dist/browser/signalr.min.js"></script>
<script src="/js/editor.js"></script>
<script type="module">
  import { Widget } from './js/widget.js';
  import { createElementFromWidget } from './js/widgetHelper.js';
  import { v4 as uuid } from 'https://jspm.dev/uuid';

  let urlParams = new URLSearchParams(window.location.search);
  let projectId = urlParams.get("projectId");
  let canvas = document.getElementById("canvas");

  document.querySelectorAll(".widget-preview").forEach(element => {
    element.addEventListener("dragstart", (event) => {
      let widgetType = element.dataset.widgetType;
      let styles = element.computedStyleMap();

      let elementRect = event.target.getBoundingClientRect();
      let widget = new Widget(
        uuid(),
        null,
        widgetType,
        { "x": event.clientX - elementRect.left, "y": event.clientY - elementRect.top },
        { "x": 150, "y": 70 },
        element.innerHTML,
        styles.get("background-color").toString(),
        styles.get("border-color").toString(),
        null
      );

      event.dataTransfer.effectAllowed = "copy";
      event.dataTransfer.setData("widgetData", JSON.stringify(widget));
    });
    element.addEventListener("dragover", handleWidgetDragOver);
  });

  document.querySelectorAll(".dropped-widget").forEach(element => {
    element.addEventListener("dragstart", (event) => { 
      console.log("stuff happened");
      handleDroppedWidgetDragStart(event, element); 
    });
    console.log(element);
  });

  document.addEventListener("keydown", (event) => {
    if (event.code === "Delete") {
      let currentWidgets = [...canvas.children];
      let currentlyFocusedWidgets = currentWidgets.filter(w => w.getAttribute("data-is-selected") === "true");
      
      if (connection != null) {
        currentlyFocusedWidgets.forEach(w => {
          let widgetGuid = w.id.split("_").pop();
          connection.invoke("RemoveWidgetFromWebProject", projectId, widgetGuid).catch((err) => {
            return console.error(err.toString());
          });
          w.remove();
        });
      }
      else {
        alert("Internal error: Could not remove widget. Please try refreshing the page.");
      }
    }
  });

  function handleDroppedWidgetDragStart(event, element) {
    event.stopPropagation();
    let elementRect = event.target.getBoundingClientRect();
    let grabPosition = {
      "id": element.id,
      "x": event.clientX - elementRect.left,
      "y": event.clientY - elementRect.top
    };
    let json = JSON.stringify(grabPosition);
    console.log(`started dragging: ${json}`);

    event.dataTransfer.effectAllowed = "move";
    event.dataTransfer.dropEffect = "move";
    event.dataTransfer.setData("grabPosition", json);
  }

  function handleNewDroppedWidgetResize(event, element) {
    let width = element.style.width.replace("px", "");
    let height = element.style.height.replace("px", "");
    if (connection != null) {
      connection.invoke("UpdateWidgetSize", projectId, width, height).catch((err) => {
        return console.error(err.toString());
      });
    }
  }

  function handleDroppedWidgetResize(event, element) {
    let styles = element.computedStyleMap();
    let width = styles.get("width").toString().replace("px", "");
    let height = styles.get("height").toString().replace("px", "");
    if (connection != null) {
      connection.invoke("UpdateWidgetSize", projectId, width, height).catch((err) => {
        return console.error(err.toString());
      });
    }
  }

  function handleWidgetDragOver(e) {
    e.preventDefault();
    return false;
  }

  function handleCanvasDragOver(e) {
    e.preventDefault();
    return false;
  }

  function handleCanvasDrop(e) { 
    e.stopPropagation();

    if (e.dataTransfer.effectAllowed === "copy") {
      let widgetData = JSON.parse(e.dataTransfer.getData("widgetData"));

      let newElement = createElementFromWidget(widgetData, e);

      newElement.addEventListener("dragstart", (e) => handleDroppedWidgetDragStart(e, newElement));
      // newElement.addEventListener("resize", (e) => handleNewDroppedWidgetResize(e, newElement)); // Use ResizeObserver API

      if (connection != null) {
        connection.invoke("AddWidgetToWebProject", projectId, widgetData).catch((err) => {
          return console.error(err.toString());
        });
      }
      e.target.appendChild(newElement);
    } 
    else {
      let grabPosition = JSON.parse(e.dataTransfer.getData("grabPosition"));

      let canvasRect = document.getElementById("canvas").getBoundingClientRect();
      let newPositionX = e.clientX - canvasRect.left - grabPosition.x;
      let newPositionY = e.clientY - canvasRect.top - grabPosition.y;

      let draggingElement = document.getElementById(grabPosition.id);
      draggingElement.style.setProperty("top", `${newPositionY}px`);
      draggingElement.style.setProperty("left", `${newPositionX}px`);

      if (connection != null) {
        let widgetGuid = grabPosition.id.split("_").pop();
        connection.invoke("UpdateWidgetPosition", widgetGuid, newPositionX, newPositionY).catch((err) => {
          return console.error(err.toString());
        });
      }
    }
    
    return false;
  }

  canvas.addEventListener("dragover", handleCanvasDragOver);
  canvas.addEventListener("drop", handleCanvasDrop);
  canvas.addEventListener("click", (e) => {
    if (e.target.id === canvas.id) { 
      let currentWidgets = [...canvas.children];
      let currentlyFocusedWidgets = currentWidgets.filter(w => w.getAttribute("data-is-selected") === "true");
      currentlyFocusedWidgets.forEach(w => {
        w.setAttribute("data-is-selected", "false");
        w.classList.remove("selected-widget");
      });
    }
  });

  document.getElementById("clear-canvas-btn").addEventListener("click", handleClearCanvas);
  function handleClearCanvas(e) {
    var canvas = document.querySelector("#canvas");
    canvas.replaceChildren();
  }
</script>
<style>
  .selected-widget {
    border: 1px dashed black;
  }
</style>

@code {
  [SupplyParameterFromQuery]
  private Guid ProjectId { get; set; }

  private WebProject? WebProject { get; set; }
  private string? PreviousTitle { get; set; }
  private string? NewTitle { get; set; }

  private HubConnection? _hubConnection;

  protected override async Task OnInitializedAsync()
  {
    WBS.RemoveAllWidgetsForProject(ProjectId); // clear cache

    var query = new GetWebProject.Query(ProjectId);
    WebProject = await Sender.Send(query);

    if (WebProject is null)
    {
      await JSRuntime.AlertAsync("Web Project data not found. Please close this tab and try again.");
      return;
    }
    PreviousTitle = WebProject.Name;
    WBS.AddWidgets(WebProject.Id, WebProject.Widgets);

    _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/webprojects"))
        .Build();

    _hubConnection.On<Guid, string>("IncomingNewWebProjectTitle", (projectId, newTitle) =>
    {
      if (projectId == this.ProjectId)
      {
        PreviousTitle = newTitle;
        InvokeAsync(StateHasChanged);
      }
    });

    await _hubConnection.StartAsync();
    await _hubConnection.SendAsync("JoinWebProjectGroup", ProjectId);
    Debug.WriteLine($"Widget count: {WebProject.Widgets.Count}");
  }

  internal async Task HandleTitleChange(FocusEventArgs args)
  {
    if (!string.IsNullOrEmpty(NewTitle))
    {
      var command = new UpdateWebProjectTitle.Command(ProjectId, NewTitle);
      var success = await Sender.Send(command);

      if (_hubConnection is not null && success is true)
        await _hubConnection.SendAsync("UpdateWebProjectTitle", ProjectId, NewTitle);
    }
  }

  internal async Task HandleSave()
  {
    if (_hubConnection is not null)
      await _hubConnection.SendAsync(nameof(WebProjectHub.SaveWebProjectAsync), ProjectId);
  }

  public async ValueTask DisposeAsync()
  {
    WBS.RemoveAllWidgetsForProject(ProjectId);

    if (_hubConnection is not null)
      await _hubConnection.DisposeAsync();
  }
}
