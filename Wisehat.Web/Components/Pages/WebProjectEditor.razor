@page "/editor"
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using Wisehat.Domain.Commands.WebProjects
@using Wisehat.Domain.Entities
@using Wisehat.Domain.Queries.WebProjects
@using MediatR
@using Wisehat.Web.Components.Layout
@using Wisehat.Web.Hubs
@using Wisehat.Web.Services
@inject ISender Sender
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject EditorWidgetCacheService WBS
@layout EditorLayout
@implements IAsyncDisposable

<PageTitle>Page Editor</PageTitle>

<SectionContent SectionName="project-title">
  <input type="text" placeholder="@PreviousTitle" id="title" @bind-value="@NewTitle" @onfocusout="HandleCrossTabTitleChange" />
</SectionContent>

<div id="page-container">
  <div id="widget-options-menu">
    <div id="save-btn">
      <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24">
        <path d="M840-680v480q0 33-23.5 56.5T760-120H200q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h480l160 160Zm-80 34L646-760H200v560h560v-446ZM480-240q50 0 85-35t35-85q0-50-35-85t-85-35q-50 0-85 35t-35 85q0 50 35 85t85 35ZM240-560h360v-160H240v160Zm-40-86v446-560 114Z" />
      </svg>
      <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24" id="save-indicator" class="hidden">
        <path d="m422-232 207-248H469l29-227-185 267h139l-30 208ZM320-80l40-280H160l360-520h80l-40 320h240L400-80h-80Zm151-390Z" />
      </svg>
    </div>
    <div id="clear-canvas-btn">
      Clear Canvas
    </div>
  </div>
  <div id="widget-sidebar">
    <div id="sidebar-title">Widgets</div>
    <div id="widgets">
      <div class="widget-preview-container">
        <h2>Fill box</h2>
        <div id="fillbox-widget" class="widget-preview" draggable="true" data-widget-type="fillbox">
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Text box</h2>
        <div id="textbox-widget" class="widget-preview" draggable="true" data-widget-type="textbox">
          <div>Sample Text</div>
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Image box</h2>
        <div id="imagebox-widget" class="widget-preview" draggable="true" data-widget-type="imagebox">
          <img src="sample-image.jpg" />
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Video box</h2>
        <div id="videobox-widget" class="widget-preview" draggable="true" data-widget-type="videobox">
          <iframe width="150" height="80" src="https://youtu.be/dQw4w9WgXcQ?si=yU6qF0_BJpAY01d9" longdesc="Youtube Video">
          </iframe>
        </div>
      </div>
    </div>
  </div>
  <div id="canvas">
    @if (WebProject is not null && WebProject.Widgets.Count > 0)
    {
      @foreach (var widget in WBS.GetWidgetsByProject(ProjectId))
      {
        var id = $"{widget.Type.ToString().ToLower()}_{widget.Id}";
        <div id="@(id)"
             style="position: absolute;
                    top: @(widget.Position.Y)px;
                    left: @(widget.Position.X)px;
                    width: @(widget.Size.X)px;
                    height: @(widget.Size.Y)px;
                    border-radius: 4px;
                    border-color: @widget.BorderColor;
                    background-color: @widget.BackgroundColor;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    cursor: grab;
                    resize: both;
                    overflow: auto;"
             draggable="true"
             class="dropped-widget"
             data-is-selected="false">
          @((MarkupString)(widget.Content ?? ""))
        </div>
      }
    }
  </div>
  <div id="context-menu" class="hidden" data-hidden="true">
    <div class="menu-btn" id="fill-color-container">
      Change fill color: 
      <input type="color" value="#e49273ff" id="widget-fill-color-input" />
    </div>
    <div class="menu-btn">Change border</div>
    <div class="menu-btn">Delete</div>
    <div class="menu-btn">About this widget</div>
  </div>
</div>

<style>
  .hidden {
    display: none !important;
  }

  .selected-widget {
    border: 1px dashed black;
  }
</style>

@code {
  [SupplyParameterFromQuery]
  private Guid ProjectId { get; set; }

  private WebProject? WebProject { get; set; }
  private string? PreviousTitle { get; set; }
  private string? NewTitle { get; set; }

  private HubConnection? _hubConnection;
  private IJSObjectReference? _jsModule;

  protected override async Task OnInitializedAsync()
  {
    WBS.RemoveAllWidgetsForProject(ProjectId); // clear cache

    var query = new GetWebProject.Query(ProjectId);
    WebProject = await Sender.Send(query);

    if (WebProject is null)
    {
      await JSRuntime.AlertAsync("Project data not found. Please close this tab and try again.");
      return;
    }
    PreviousTitle = WebProject.Name;
    WBS.AddWidgets(WebProject.Id, WebProject.Widgets);

    _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/webprojects"))
        .Build();

    _hubConnection.On<Guid, string>("IncomingNewWebProjectTitle", (projectId, newTitle) =>
    {
      if (projectId == this.ProjectId)
      {
        PreviousTitle = newTitle;
        InvokeAsync(StateHasChanged);
      }
    });

    await _hubConnection.StartAsync();
    await _hubConnection.SendAsync("JoinWebProjectGroup", ProjectId);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    _jsModule = await JSRuntime.ImportModuleAsync("./Components/Pages/WebProjectEditor.razor.js");
    if (!firstRender)
    {
      await _jsModule.InvokeVoidAsync("initializeEventListeners");
    }
  }

  internal async Task HandleCrossTabTitleChange(FocusEventArgs args)
  {
    if (!string.IsNullOrEmpty(NewTitle))
    {
      var command = new UpdateWebProjectTitle.Command(ProjectId, NewTitle);
      var success = await Sender.Send(command);

      if (_hubConnection is not null && success is true)
        await _hubConnection.SendAsync(nameof(WebProjectHub.UpdateWebProjectTitle), ProjectId, NewTitle);
    }
  }

  public async ValueTask DisposeAsync()
  {
    if (_hubConnection is not null)
      await _hubConnection.DisposeAsync();
  }
}
