@page "/editor"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using Wisehat.Domain.Commands.WebProjects
@using Wisehat.Domain.Entities
@using Wisehat.Domain.Queries.WebProjects
@using MediatR
@using Wisehat.Web.Components.Layout
@inject ISender Sender
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@layout EditorLayout
@implements IAsyncDisposable

<PageTitle>Page Editor</PageTitle>

<SectionContent SectionName="project-title">
  <input type="text" placeholder="@PreviousTitle" id="title" @bind-value="@NewTitle" @onfocusout="HandleTitleChange" />
</SectionContent>

<div id="page-container">
  <div id="widget-options-menu">
    <div id="clear-canvas-btn" onclick="handleClearCanvas(event)">Clear Canvas</div>
  </div>
  <div id="widget-sidebar">
    <div id="sidebar-title">Widgets</div>
    <div id="widgets">
      <div class="widget-preview-container">
        <h2>Fill box</h2>
        <div id="fillbox-widget" class="widget-preview" draggable="true">
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Text box</h2>
        <div id="textbox-widget" class="widget-preview" draggable="true">
          <div>Sample Text</div>
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Image box</h2>
        <div id="imagebox-widget" class="widget-preview" draggable="true">
          <img src="sample-image.jpg"/>
        </div>
      </div>
      <div class="widget-preview-container">
        <h2>Video box</h2>
        <div id="videobox-widget" class="widget-preview" draggable="true">
        </div>
      </div>      
    </div>
  </div>
  <div id="canvas" 
    ondragover="handleCanvasDragOver(event)" 
    ondrop="handleCanvasDrop(event)" >
  </div>
</div>

<script>
  document.querySelectorAll(".widget-preview").forEach((element) => {
    element.addEventListener("dragstart", handleWidgetDragStart);
    element.addEventListener("dragover", handleWidgetDragOver);
  });

  function handleWidgetDragStart(e) {
    console.log("started dragging fillbox");

    e.dataTransfer.effectAllowed = "copy";
    // e.dataTransfer.dropEffect = "copy";
    e.dataTransfer.setData("data", e.target.id);

    let elementRect = e.target.getBoundingClientRect();
    e.dataTransfer.setData("grab-position-x", e.clientX - elementRect.left);
    e.dataTransfer.setData("grab-position-y", e.clientY - elementRect.top);
  }

  function handleWidgetDragOver(e) {
    e.preventDefault();
    return false;
  }

  function handleCanvasDragOver(e) {
    e.preventDefault();
  }

  function newHandleWidgetDragStart(e) {
    console.log("started dragging dropped fillbox");

    e.dataTransfer.effectAllowed = "move";
    // e.dataTransfer.dropEffect = "move";
    e.dataTransfer.setData("data", e.target.id);

    let elementRect = e.target.getBoundingClientRect();
    e.dataTransfer.setData("grab-position-x", e.clientX - elementRect.left);
    e.dataTransfer.setData("grab-position-y", e.clientY - elementRect.top);
  }

  var copyCounter = 1;
  function handleCanvasDrop(e) { 
    e.stopPropagation();
    console.log("something dropped");
    console.log(e.dataTransfer);

    if (e.dataTransfer.effectAllowed === "copy") {
      let data = e.dataTransfer.getData("data");
      let grabPositionX = e.dataTransfer.getData("grab-position-x");
      let grabPositionY = e.dataTransfer.getData("grab-position-y");
      let originalElement = document.getElementById(data);

      let elementCopy = originalElement.cloneNode(true);
      elementCopy.removeEventListener("dragstart", handleWidgetDragStart);
      elementCopy.addEventListener("dragstart", newHandleWidgetDragStart, true);

      let canvasRect = e.target.getBoundingClientRect();
      elementCopy.id = `${elementCopy.id}-${copyCounter}`;
      let originalStyles = window.getComputedStyle(originalElement);
      let originalCssText = Object.values(originalStyles).reduce(
        (css, propertyName) => {
          if (propertyName === "position")
            return `${css}position:absolute;`;
          else if (propertyName === "top")
            return `${css}top:${e.clientY - canvasRect.top - grabPositionY}px;`;
          else if (propertyName === "left")
            return `${css}left:${e.clientX - canvasRect.left - grabPositionX}px;`;
          else
            return `${css}${propertyName}:${originalStyles.getPropertyValue(propertyName)};`;
        }
      );
      elementCopy.style.cssText = originalCssText;

      e.target.appendChild(elementCopy);
      copyCounter++;
    } else {
      let data = e.dataTransfer.getData("data");
      let grabPositionX = e.dataTransfer.getData("grab-position-x");
      let grabPositionY = e.dataTransfer.getData("grab-position-y");
      let element = document.getElementById(data);
      console.log(element);

      element.style["inset"] = `${e.clientY - grabPositionY}px auto auto ${e.clientX - grabPositionX}px;`;
    }
    
    return false;
  }

  function handleClearCanvas(e) {
    var canvas = document.querySelector("#canvas");
    canvas.replaceChildren();
    console.log("cleared canvas");
  }
</script>

@code {
  [SupplyParameterFromQuery]
  private Guid ProjectId { get; set; }

  private WebProject? WebProject { get; set; }
  private string? PreviousTitle { get; set; }
  private string? NewTitle { get; set; }

  private int TabId { get; set; } = new Random().Next();

  private HubConnection? _hubConnection;

  protected override async Task OnInitializedAsync()
  {
    var query = new GetWebProject.Query(ProjectId);
    WebProject = await Sender.Send(query);

    if (WebProject is null)
    {
      await JSRuntime.AlertAsync("Web Project data not found. Please close this tab and try again.");
      return;
    }
    PreviousTitle = WebProject.Name;

    _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/webprojects"))
        .Build();

    _hubConnection.On<Guid, string>("UpdateWebProjectTitle", (projectId, newTitle) =>
    {
      Debug.WriteLine($"new title incoming in tab {TabId}...");
      if (projectId == this.ProjectId)
      {
        PreviousTitle = newTitle;
        InvokeAsync(StateHasChanged);
      }
    });

    await _hubConnection.StartAsync();
    await _hubConnection.SendAsync("JoinWebProjectGroup", ProjectId);
    Debug.WriteLine($"Tab {TabId} created");
  }

  internal async Task HandleTitleChange(FocusEventArgs args)
  {
    if (!string.IsNullOrEmpty(NewTitle))
    {
      var command = new UpdateWebProjectTitle.Command(ProjectId, NewTitle);
      var success = await Sender.Send(command);

      if (_hubConnection is not null && success is true)
        await _hubConnection.SendAsync("UpdateWebProjectTitle", ProjectId, NewTitle);
    }
  }

  public async ValueTask DisposeAsync()
  {
    if (_hubConnection is not null)
      await _hubConnection.DisposeAsync();
  }
}
