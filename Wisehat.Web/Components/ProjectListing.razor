@using System.Diagnostics
@using Wisehat.Domain.Commands.WebProjects
@inject IJSRuntime JSRuntime
@using MediatR
@inject ISender Sender

<div class="project-listing-container">
  <div class="project-listing-name">@ProjectName</div>
  <div class="project-listing-last-modified">@LastModified.ToShortDateString()</div>
  <div class="project-listing-quick-controls">
    <p class="edit-project-listing-btn" @onclick="HandleEdit">Edit</p>
    <p class="delete-project-listing-btn" @onclick="HandleDelete">Delete</p>
  </div>
</div>

@code {
  [Parameter]
  public Guid ProjectId { get; set; }

  [Parameter]
  public string ProjectName { get; set; } = "New Project";

  [Parameter]
  public DateTime LastModified { get; set; }

  [Parameter]
  public required Action ParentStateChanger { get; set; }

  private async Task HandleEdit()
  {
    await JSRuntime.OpenInNewTabAsync($"/editor?projectId={ProjectId}");
    LastModified = DateTime.Now;
  }

  private async void HandleDelete()
  {
    var delete = await JSRuntime.ConfirmAsync($"Are you sure you want to delete {ProjectName}?");
    if (delete)
    {
      var command = new DeleteWebProject.Command(ProjectId);
      var isDeleted = await Sender.Send(command);
      if (isDeleted)
      {
        await JSRuntime.AlertAsync($"Successfully deleted {ProjectName}");
        ParentStateChanger.Invoke();
      }
      else
      {
        await JSRuntime.AlertAsync($"Failed to delete {ProjectName}");
      }
    }
  }
}
